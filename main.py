import os
import telebot
from dotenv import load_dotenv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from gpt_signal_bot import get_trade_signal
from okx_api import place_order
import threading
import time

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_USER_ID = os.getenv("TELEGRAM_USER_ID")
TRADE_AMOUNT = os.getenv("TRADE_AMOUNT", "0.01")  # ‚Üê –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏

bot = telebot.TeleBot(BOT_TOKEN)

last_signals = {}

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏—à–ª—é —Å–∏–≥–Ω–∞–ª, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞. üß†")

@bot.message_handler(commands=['test'])
def test_signal(message):
    signal = """üìà –°–∏–≥–Ω–∞–ª: –õ–û–ù–ì –ø–æ ETH
–í—Ö–æ–¥: 2500
–¢–µ–π–∫: 2550
–°—Ç–æ–ø: 2470
–ü—Ä–∏—á–∏–Ω–∞: —Ç–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""

    inst_id = "ETH-USDT"
    last_signals[message.chat.id] = {"inst_id": inst_id, "price": "2500"}

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É –ø–æ ETH", callback_data="enter_trade_eth"))

    bot.send_message(message.chat.id, signal, reply_markup=markup)

# üìà –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
def auto_market_scan():
    while True:
        coins = ["ETH", "BTC", "SOL"]
        signal_sent = False

        for coin in coins:
            signal = get_trade_signal(coin)
            price = None

            try:
                for line in signal.split("\n"):
                    if "–≤—Ö–æ–¥" in line.lower():
                        numbers = [s for s in line.split() if s.replace('.', '', 1).isdigit()]
                        if numbers:
                            price = numbers[0]
                            break
            except:
                price = None

            if signal and price:
                inst_id = f"{coin}-USDT"
                last_signals[TELEGRAM_USER_ID] = {"inst_id": inst_id, "price": price}

                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(f"‚úÖ –í–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É –ø–æ {coin}", callback_data=f"enter_trade_{coin.lower()}"))

                bot.send_message(TELEGRAM_USER_ID, signal, reply_markup=markup)
                signal_sent = True
                break  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –∑–∞ —Ü–∏–∫–ª

        if not signal_sent:
            bot.send_message(TELEGRAM_USER_ID, "üîç –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")

        time.sleep(1800)  # 30 –º–∏–Ω—É—Ç

@bot.callback_query_handler(func=lambda call: call.data.startswith("enter_trade_"))
def execute_trade(call):
    user_id = call.message.chat.id
    data = last_signals.get(user_id)

    if not data:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª.")
        return

    inst_id = data["inst_id"]
    price = data["price"] or "market"

    response = place_order(
        inst_id=inst_id,
        side="buy",
        px=price,
        ord_type="market",
        sz=TRADE_AMOUNT
    )

    bot.send_message(call.message.chat.id, f"‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ {inst_id}: {response}")

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
threading.Thread(target=auto_market_scan).start()

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
bot.infinity_polling()
